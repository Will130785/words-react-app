/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WordsRouteImport } from './routes/words'
import { Route as ViewWordsRouteImport } from './routes/view-words'
import { Route as AddWordsRouteImport } from './routes/add-words'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EditWordIdRouteImport } from './routes/edit-word/$id'

const WordsRoute = WordsRouteImport.update({
  id: '/words',
  path: '/words',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewWordsRoute = ViewWordsRouteImport.update({
  id: '/view-words',
  path: '/view-words',
  getParentRoute: () => rootRouteImport,
} as any)
const AddWordsRoute = AddWordsRouteImport.update({
  id: '/add-words',
  path: '/add-words',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EditWordIdRoute = EditWordIdRouteImport.update({
  id: '/edit-word/$id',
  path: '/edit-word/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-words': typeof AddWordsRoute
  '/view-words': typeof ViewWordsRoute
  '/words': typeof WordsRoute
  '/edit-word/$id': typeof EditWordIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-words': typeof AddWordsRoute
  '/view-words': typeof ViewWordsRoute
  '/words': typeof WordsRoute
  '/edit-word/$id': typeof EditWordIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/add-words': typeof AddWordsRoute
  '/view-words': typeof ViewWordsRoute
  '/words': typeof WordsRoute
  '/edit-word/$id': typeof EditWordIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/add-words' | '/view-words' | '/words' | '/edit-word/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/add-words' | '/view-words' | '/words' | '/edit-word/$id'
  id:
    | '__root__'
    | '/'
    | '/add-words'
    | '/view-words'
    | '/words'
    | '/edit-word/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddWordsRoute: typeof AddWordsRoute
  ViewWordsRoute: typeof ViewWordsRoute
  WordsRoute: typeof WordsRoute
  EditWordIdRoute: typeof EditWordIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/words': {
      id: '/words'
      path: '/words'
      fullPath: '/words'
      preLoaderRoute: typeof WordsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/view-words': {
      id: '/view-words'
      path: '/view-words'
      fullPath: '/view-words'
      preLoaderRoute: typeof ViewWordsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-words': {
      id: '/add-words'
      path: '/add-words'
      fullPath: '/add-words'
      preLoaderRoute: typeof AddWordsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit-word/$id': {
      id: '/edit-word/$id'
      path: '/edit-word/$id'
      fullPath: '/edit-word/$id'
      preLoaderRoute: typeof EditWordIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddWordsRoute: AddWordsRoute,
  ViewWordsRoute: ViewWordsRoute,
  WordsRoute: WordsRoute,
  EditWordIdRoute: EditWordIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
